package partitionequalsubsetsum

import "testing"

func TestCanPartition(t *testing.T) {
	testCases := []struct {
		name     string
		nums     []int
		expected bool
	}{
		{
			name:     "test 1",
			nums:     []int{1, 5, 11, 5},
			expected: true,
		},
		{
			name:     "test 2",
			nums:     []int{1, 2, 3, 5},
			expected: false,
		},
		{
			name:     "test 3",
			nums:     []int{1, 2, 3, 4, 5, 6, 7},
			expected: true,
		},
		{
			name:     "test 4",
			nums:     []int{},
			expected: false,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			actual := canPartition(tc.nums)
			if actual != tc.expected {
				t.Errorf("Expected %t but was %t", tc.expected, actual)
			}
		})
	}
}
